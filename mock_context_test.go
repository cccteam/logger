// Code generated by MockGen. DO NOT EDIT.
// Source: context.go

// Package logger is a generated GoMock package.
package logger

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockctxLogger is a mock of ctxLogger interface.
type MockctxLogger struct {
	ctrl     *gomock.Controller
	recorder *MockctxLoggerMockRecorder
}

// MockctxLoggerMockRecorder is the mock recorder for MockctxLogger.
type MockctxLoggerMockRecorder struct {
	mock *MockctxLogger
}

// NewMockctxLogger creates a new mock instance.
func NewMockctxLogger(ctrl *gomock.Controller) *MockctxLogger {
	mock := &MockctxLogger{ctrl: ctrl}
	mock.recorder = &MockctxLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockctxLogger) EXPECT() *MockctxLoggerMockRecorder {
	return m.recorder
}

// AddRequestAttribute mocks base method.
func (m *MockctxLogger) AddRequestAttribute(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRequestAttribute", key, value)
}

// AddRequestAttribute indicates an expected call of AddRequestAttribute.
func (mr *MockctxLoggerMockRecorder) AddRequestAttribute(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestAttribute", reflect.TypeOf((*MockctxLogger)(nil).AddRequestAttribute), key, value)
}

// Debug mocks base method.
func (m *MockctxLogger) Debug(ctx context.Context, v any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", ctx, v)
}

// Debug indicates an expected call of Debug.
func (mr *MockctxLoggerMockRecorder) Debug(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockctxLogger)(nil).Debug), ctx, v)
}

// Debugf mocks base method.
func (m *MockctxLogger) Debugf(ctx context.Context, format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockctxLoggerMockRecorder) Debugf(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockctxLogger)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *MockctxLogger) Error(ctx context.Context, v any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", ctx, v)
}

// Error indicates an expected call of Error.
func (mr *MockctxLoggerMockRecorder) Error(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockctxLogger)(nil).Error), ctx, v)
}

// Errorf mocks base method.
func (m *MockctxLogger) Errorf(ctx context.Context, format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockctxLoggerMockRecorder) Errorf(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockctxLogger)(nil).Errorf), varargs...)
}

// Info mocks base method.
func (m *MockctxLogger) Info(ctx context.Context, v any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", ctx, v)
}

// Info indicates an expected call of Info.
func (mr *MockctxLoggerMockRecorder) Info(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockctxLogger)(nil).Info), ctx, v)
}

// Infof mocks base method.
func (m *MockctxLogger) Infof(ctx context.Context, format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockctxLoggerMockRecorder) Infof(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockctxLogger)(nil).Infof), varargs...)
}

// Warn mocks base method.
func (m *MockctxLogger) Warn(ctx context.Context, v any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", ctx, v)
}

// Warn indicates an expected call of Warn.
func (mr *MockctxLoggerMockRecorder) Warn(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockctxLogger)(nil).Warn), ctx, v)
}

// Warnf mocks base method.
func (m *MockctxLogger) Warnf(ctx context.Context, format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockctxLoggerMockRecorder) Warnf(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockctxLogger)(nil).Warnf), varargs...)
}

// WithAttributes mocks base method.
func (m *MockctxLogger) WithAttributes() attributer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAttributes")
	ret0, _ := ret[0].(attributer)
	return ret0
}

// WithAttributes indicates an expected call of WithAttributes.
func (mr *MockctxLoggerMockRecorder) WithAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAttributes", reflect.TypeOf((*MockctxLogger)(nil).WithAttributes))
}

// Mockattributer is a mock of attributer interface.
type Mockattributer struct {
	ctrl     *gomock.Controller
	recorder *MockattributerMockRecorder
}

// MockattributerMockRecorder is the mock recorder for Mockattributer.
type MockattributerMockRecorder struct {
	mock *Mockattributer
}

// NewMockattributer creates a new mock instance.
func NewMockattributer(ctrl *gomock.Controller) *Mockattributer {
	mock := &Mockattributer{ctrl: ctrl}
	mock.recorder = &MockattributerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockattributer) EXPECT() *MockattributerMockRecorder {
	return m.recorder
}

// AddAttribute mocks base method.
func (m *Mockattributer) AddAttribute(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAttribute", key, value)
}

// AddAttribute indicates an expected call of AddAttribute.
func (mr *MockattributerMockRecorder) AddAttribute(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttribute", reflect.TypeOf((*Mockattributer)(nil).AddAttribute), key, value)
}

// Logger mocks base method.
func (m *Mockattributer) Logger() ctxLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(ctxLogger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockattributerMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*Mockattributer)(nil).Logger))
}
